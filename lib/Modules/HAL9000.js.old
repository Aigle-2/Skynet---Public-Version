const Interface = require("../Framework/Interface");
const ModuleInterface = require("../Framework/ModuleInterface");
const util = require("util");
const colors = require("colors");
const levenshtein = require("js-levenshtein");

class HAL9000 {
  #skynet;
  #config;
  #trainDataset;
  #testDataset;
  #verbose = false;

  get skynet() {
    return this.#skynet;
  }

  set skynet(value) {
    this.#skynet = value;
    return this;
  }

  get tensorflow() {
    return this.skynet.tensorflow;
  }

  get skymath() {
    return this.skynet.skymath;
  }

  get config() {
    return this.#config;
  }

  get trainDataset() {
    return this.#trainDataset;
  }

  get testDataset() {
    return this.#testDataset;
  }

  constructor() {
    Interface.checkImplements(this, ModuleInterface);
    this.#config = require("./HAL9000.config.json");
    this.initialize();
    // console.log(util.inspect(this.config).blue);
  }

  generateTrainingData() {
    // this.#trainDataset = require("./training/HAL9000/trainDataset.json");
    // this.#testDataset = require("./training/HAL9000/testDataset.json");
    // this.#trainDataset = require("E:/Projets/Skynet/training/HAL9000/trainDataset"); //"C:/Users/Esteban/Google Drive/Esteban/Codes/skynet/training/HAL9000/trainDataset"
    // this.#testDataset = require("E:/Projets/Skynet/training/HAL9000/testDataset"); //"C:/Users/Esteban/Google Drive/Esteban/Codes/skynet/training/HAL9000/testDataset"
    this.#trainDataset = require("C:/Users/Esteban/Google Drive/Esteban/Codes/skynet/training/HAL9000/trainDataset");
    this.#testDataset = require("C:/Users/Esteban/Google Drive/Esteban/Codes/skynet/training/HAL9000/testDataset");
    const trainInputsArray = [];
    const trainOutputsArray = [];
    for (let i = 0; i < this.trainDataset.different.length; i++) {
      let obj = this.analyse(
        this.trainDataset.different[i].failRun,
        this.trainDataset.different[i].comparedRun
      );
      if (obj === false || obj.every((item) => item === 0)) {
        continue;
      } else {
        trainInputsArray.push(obj);
        // console.log("Different");
        // console.log(obj);
        trainOutputsArray.push([0, 1]);
      }
    }

    for (let i = 0; i < this.trainDataset.identical.length; i++) {
      let obj = this.analyse(
        this.trainDataset.identical[i].failRun,
        this.trainDataset.identical[i].comparedRun
      );
      if (obj === false) {
        continue;
      } else {
        trainInputsArray.push(obj);
        // console.log("Identical");
        // console.log(obj);
        trainOutputsArray.push([1, 0]);
      }
    }
    let obj2 = this.shuffleData(trainInputsArray, trainOutputsArray);
    const trainInputsTensor = this.tensorflow.tensor2d(obj2.array1);
    const trainOutputsTensor = this.tensorflow.tensor2d(obj2.array2);
    return {
      trainInputsTensor: trainInputsTensor,
      trainOutputsTensor: trainOutputsTensor,
    };
  }

  generateTestingData() {
    const testingInputsArray = [];
    const testingOutputsArray = [];
    for (let i = 0; i < this.testDataset.different.length; i++) {
      let obj = this.analyse(
        this.testDataset.different[i].failRun,
        this.testDataset.different[i].comparedRun
      );
      if (obj === false || obj.every((item) => item === 0)) {
        console.log();
        continue;
      } else {
        testingInputsArray.push(obj);
        // console.log("Different");
        // console.log(obj);
        testingOutputsArray.push([0, 1]);
      }
    }
    for (let i = 0; i < this.testDataset.identical.length; i++) {
      let obj = this.analyse(
        this.testDataset.identical[i].failRun,
        this.testDataset.identical[i].comparedRun
      );
      if (obj === false) {
        continue;
      } else {
        testingInputsArray.push(obj);
        // console.log("Identical");
        // console.log(obj);
        testingOutputsArray.push([1, 0]);
      }
    }
    let obj2 = this.shuffleData(testingInputsArray, testingOutputsArray);
    const testingInputsTensor = this.tensorflow.tensor2d(obj2.array1);
    const testingOutputsTensor = this.tensorflow.tensor2d(obj2.array2);
    return {
      testingInputsTensor: testingInputsTensor,
      testingExpectedOutputsTensor: testingOutputsTensor,
    };
  }

  saveDir() {
    return "hal9000";
  }

  shuffleData(array1, array2) {
    let newArray1 = [];
    let newArray2 = [];
    let arrayLength = array1.length;
    let index;
    for (let i = 0; i < arrayLength; i++) {
      index = Math.trunc(Math.random() * array1.length);
      //console.log(index);
      newArray1.push(array1[index]);
      newArray2.push(array2[index]);
      array1.splice(index, 1);
      array2.splice(index, 1);
    }
    return {
      array1: newArray1,
      array2: newArray2,
    };
  }

  analyse(run1, run2) {
    // console.log(run1);
    // console.log(run2);
    const undefinedValue = -10;
    if (
      (Array.isArray(run1) && run1.length == 0) ||
      (Array.isArray(run2) && run2.length == 0)
    ) {
      return false;
    }
    let setCountInput = this.HAL9000Encoder(
      run1.step.code.toString(),
      run2.step.code.toString()
    ); //Algo fabrice
    let messageInput = this.HAL9000Encoder(run1.message, run2.message);
    let failDataMessageInput = this.HAL9000Encoder(run1.message, run2.message);
    let failDataErrorInput;
    if (
      Math.max(
        (run1.error.name || run1.error).length,
        (run2.error.name || run2.error).length
      ) === 0
    ) {
      failDataErrorInput = 0;
    } else {
      failDataErrorInput =
        Math.abs(
          levenshtein(
            run1.error.name || run1.error,
            run2.error.name || run2.error
          )
        ) /
        Math.max(
          (run1.error.name || run1.error).length,
          (run2.error.name || run2.error).length
        );
    }
    let failDataStepLabelInput = this.HAL9000Encoder(
      run1.step.label,
      run2.step.label
    );
    let failDataStepNumberInput = this.HAL9000Encoder(
      run1.step.number,
      run2.step.number
    );
    let failDataStepCategoryInput = this.HAL9000Encoder(
      run1.step.category,
      run2.step.category
    );
    let failDataStepPriorityInput = this.HAL9000Encoder(
      run1.step.priority,
      run2.step.priority
    );
    let failDataBlockTypeInput = this.HAL9000Encoder(
      run1.block.type,
      run2.block.type
    );
    let failDataBlockCodeInput = this.HAL9000Encoder(
      run1.block.code,
      run2.block.code
    );
    let failDataBlockParametersTargetUrlInput = this.HAL9000Encoder(
      run1.block.parameters.targeturl,
      run2.block.parameters.targeturl
    );
    let failDataBlockParametersVisibilityInput = this.HAL9000Encoder(
      run1.block.parameters.visibility,
      run2.block.parameters.visibility
    );
    let failDataBlockParametersTestContentInput = this.HAL9000Encoder(
      run1.block.parameters.textContent,
      run2.block.parameters.textContent
    );
    let failDataBlockParametersExpectedTextInput = this.HAL9000Encoder(
      run1.block.parameters.expectedText,
      run2.block.parameters.expectedText
    );
    let failDataSelectorsInput = this.HAL9000Encoder(
      run1.selectors,
      run2.selectors
    );
    let failDataWebsiteCurrentUrlProtocolInput = this.HAL9000Encoder(
      run1.website.currentUrl.protocol,
      run2.website.currentUrl.protocol
    );
    let failDataWebsiteCurrentUrlHostInput = this.HAL9000Encoder(
      run1.website.currentUrl.host,
      run2.website.currentUrl.host
    );
    let failDataWebsiteCurrentUrlPathInput = this.HAL9000Encoder(
      run1.website.currentUrl.path,
      run2.website.currentUrl.path
    );
    if ((run1.step.category && run2.step.category) == "cart_add") {
      failDataWebsiteCurrentUrlPathInput = 0;
      console.log("Exception Encodeur");
    }
    let failDataWebsiteCurrentUrlSearchInput = this.HAL9000Encoder(
      run1.website.currentUrl.search,
      run2.website.currentUrl.search
    );
    let failDataWebsiteCurrentUrlHashInput = this.HAL9000Encoder(
      run1.website.currentUrl.hash,
      run2.website.currentUrl.hash
    );
    let faildataWebsiteCurrentStatusInput = this.HAL9000Encoder(
      run1.website.currentStatus,
      run2.website.currentStatus,
      true
    );

    // const A = [
    //   setCountInput,
    //   messageInput,
    //   failDataMessageInput,
    //   failDataErrorInput,
    //   failDataStepLabelInput,
    //   failDataStepNumberInput,
    //   failDataStepCategoryInput,
    //   failDataStepPriorityInput,
    //   failDataBlockTypeInput,
    //   failDataBlockCodeInput,
    //   failDataBlockParametersTargetUrlInput,
    //   failDataWebsiteCurrentUrlProtocolInput,
    //   failDataWebsiteCurrentUrlHostInput,
    //   failDataWebsiteCurrentUrlPathInput,
    //   failDataWebsiteCurrentUrlSearchInput,
    //   failDataWebsiteCurrentUrlHashInput,
    //   faildataWebsiteCurrentStatusInput,
    // ];

    // for (let i = 0; i < 17; i++) {
    //   if (isNaN(A[i])) {
    //     console.log(i + 1);
    //   }
    // }

    // console.log([
    //   setCountInput,
    //   messageInput,
    //   failDataMessageInput,
    //   failDataErrorInput,
    //   failDataStepLabelInput,
    //   failDataStepNumberInput,
    //   failDataStepCategoryInput,
    //   failDataStepPriorityInput,
    //   failDataBlockTypeInput,
    //   failDataBlockCodeInput,
    //   failDataBlockParametersTargetUrlInput,
    //   failDataSelectorsInput,
    //   failDataWebsiteCurrentUrlProtocolInput,
    //   failDataWebsiteCurrentUrlHostInput,
    //   failDataWebsiteCurrentUrlPathInput,
    //   failDataWebsiteCurrentUrlSearchInput,
    //   failDataWebsiteCurrentUrlHashInput,
    //   faildataWebsiteCurrentStatusInput,
    // ]);

    return [
      setCountInput,
      messageInput,
      failDataMessageInput,
      failDataErrorInput,
      failDataStepLabelInput,
      failDataStepNumberInput,
      failDataStepCategoryInput,
      failDataStepPriorityInput,
      failDataBlockTypeInput,
      failDataBlockCodeInput,
      failDataBlockParametersTargetUrlInput,
      failDataBlockParametersVisibilityInput,
      failDataBlockParametersTestContentInput,
      failDataBlockParametersExpectedTextInput,
      failDataSelectorsInput,
      failDataWebsiteCurrentUrlProtocolInput,
      failDataWebsiteCurrentUrlHostInput,
      failDataWebsiteCurrentUrlPathInput,
      failDataWebsiteCurrentUrlSearchInput,
      failDataWebsiteCurrentUrlHashInput,
      faildataWebsiteCurrentStatusInput,
    ];
  }

  initialize(verbose) {
    this.#verbose = verbose;
  }

  definedParameters(param1, param2) {
    if (
      (param1 === (undefined || null) || typeof param1 === "undefined") &&
      (param2 === (undefined || null) || typeof param2 === "undefined")
    ) {
      return [];
    } else {
      if (
        param1 === (undefined || null) ||
        typeof param1 === "undefined" ||
        param2 === (undefined || null) ||
        typeof param2 === "undefined"
      ) {
        if (param1 === (undefined || null) || typeof param1 === "undefined") {
          return [param2];
        } else {
          return [param1];
        }
      } else {
        return [param1, param2];
      }
    }
  }

  async moduleMassPredict(inputs) {
    const output = {};
    const promises = [];
    if (
      inputs.baseRunFailData !== undefined &&
      inputs.runFailDatas !== undefined
    ) {
      Object.entries(inputs.runFailDatas).forEach(async ([runId, failData]) => {
        promises.push(
          this.skynet
            .predict({
              failRun: inputs.baseRunFailData,
              runToCompare: failData,
            })
            .then((result) => {
              output[runId] = result;
            })
        );
      });
    }
    await Promise.all(promises);

    return output;
  }

  moduleEncoder(inputs) {
    return this.analyse(inputs.failRun, inputs.runToCompare);
  }

  HAL9000Encoder(param1, param2, identical = false) {
    let parameter;
    let parameter2;
    let definedParameters = this.definedParameters(param1, param2);
    if (definedParameters.length === 0) {
      return 0;
    }
    if (definedParameters.length === 1) {
      parameter = definedParameters[0];
      if (typeof parameter == "string") {
        return 1;
      }
      if (typeof parameter == "number") {
        if (isNaN(parameter)) {
          console.log("ERROR ENCODER NaN");
        }
        return parameter;
      }
      if (typeof parameter == "boolean") {
        return 1;
      }
      if (Array.isArray(parameter)) {
        let temp = 0;
        for (let i = 0; i < parameter.length; i++) {
          temp = temp + this.HAL9000Encoder(parameter[i], undefined);
        }
        if (parameter.length === 0) {
          return 0;
        } else {
          if (isNaN(temp / parameter.length)) {
            console.log("ERROR ENCODER NaN");
          }
          return temp / parameter.length;
        }
      }
    }
    if (definedParameters.length == 2) {
      parameter = definedParameters[0];
      parameter2 = definedParameters[1];
      if (typeof parameter == "boolean" && typeof parameter2 == "boolean") {
        if (parameter === parameter2) {
          return 0;
        } else {
          return 1;
        }
      } else if (
        typeof parameter == "string" &&
        typeof parameter2 == "string"
      ) {
        if (Math.max(parameter.length, parameter2.length) === 0) {
          return 0;
        } else {
          if (
            isNaN(
              Math.abs(levenshtein(parameter, parameter2)) /
                Math.max(parameter.length, parameter2.length)
            )
          ) {
            console.log("ERROR ENCODER NaN");
          }
          return (
            Math.abs(levenshtein(parameter, parameter2)) /
            Math.max(parameter.length, parameter2.length)
          );
        }
      } else if (
        typeof parameter == "number" &&
        typeof parameter2 == "number"
      ) {
        if (identical) {
          if (parameter === parameter2) {
            return 0;
          } else {
            return 1;
          }
        } else {
          return Math.abs(parameter - parameter2);
        }
      } else if (Array.isArray(parameter) && Array.isArray(parameter2)) {
        let temp2 = 0;
        let loopsize = Math.max(parameter.length, parameter2.length);
        while (parameter.length < loopsize) {
          parameter.push(undefined);
        }
        while (parameter2.length < loopsize) {
          parameter2.push(undefined);
        }
        for (let i = 0; i < loopsize; i++) {
          temp2 = temp2 + this.HAL9000Encoder(parameter[i], parameter2[i]);
        }
        if (loopsize === 0) {
          return 0;
        } else {
          if (isNaN(temp2 / loopsize)) {
            console.log("ERROR ENCODER NaN");
          }
          return temp2 / loopsize;
        }
      } else if (
        (Array.isArray(parameter) || Array.isArray(parameter2)) &&
        (!Array.isArray(parameter) || !Array.isArray(parameter2))
      ) {
        let arrayParam;
        let fixedParam;
        let temp3 = 0;
        if (Array.isArray(parameter)) {
          arrayParam = parameter;
          fixedParam = parameter2;
        } else {
          arrayParam = parameter2;
          fixedParam = parameter;
        }
        for (let i = 0; i < arrayParam.length; i++) {
          temp3 = temp3 + this.HAL9000Encoder(arrayParam[i], fixedParam);
        }
        if (arrayParam.length === 0) {
          return 0;
        } else {
          if (isNaN(temp3 / arrayParam.length)) {
            console.log("ERROR ENCODER NaN");
          }
          return temp3 / arrayParam.length;
        }
      } else {
        console.log(
          "ERROR ENCODER : DIFFERENT TYPES OF PARAMETERS - RETURNING -1"
        );
        console.log(
          "parameter1 : " + parameter + "  typeof =  " + typeof parameter
        );
        console.log(
          "parameter2 : " + parameter2 + "  typeof =   " + typeof parameter2
        );
        return -1;
      }
    }
  }

  HAL9000MessageErrorAnalyser(string) {
    const timeoutKey = [/(\d+)(?=\s*ms)/ms]
    const errorKeys = ["timeout", "timed out", "exceeded"];
    const actionKeys = ["select", "wait", "open", "switch"];
    const statusKeys = ["unable", "failed", "unexpected", "visible", "hidden"];
    const subjectKeys = ["value", "url", "landing url", "element", "tab", "selector"];
    let timeoutResult = [];
    let errorResult = [];
    let actionResult = [];
    let statusResult = [];
    let subjectResult = [];
    const allKeysArray = [timeoutKey, errorKeys, actionKeys, statusKeys, subjectKeys];
    string = string.toLowerCase() 
    allKeysArray.forEach((element, index) => {
      element.forEach((key) => {
        if (index === 0) {
          if (stringAnalyser(string, key) != undefined) {
            timeoutResult.push(stringAnalyser(string, key));
          }
        }
        if (index === 1) {
          if (stringAnalyser(string, key) != undefined) {
            errorResult.push(stringAnalyser(string, key));
          }
        }
        if (index === 2) {
          if (stringAnalyser(string, key) != undefined) {
            actionResult.push(stringAnalyser(string, key));
          }
        }
        if (index === 3) {
          if (stringAnalyser(string, key) != undefined) {
            statusResult.push(stringAnalyser(string, key));
          }
        }
        if (index === 4) {
          if (stringAnalyser(string, key) != undefined) {
            subjectResult.push(stringAnalyser(string, key));
          }
        }
      });
    });
    if ('url' in subjectResult && 'landing url' in subjectResult) {
      const index = subjectResult.indexOf('url');
      if (index > -1) {
        subjectResult.splice(index, 1);
      }
    }
    console.log({
      timeoutResult: timeoutResult,
      errorResult: errorResult,
      actionResult: actionResult,
      statusResult: statusResult,
      subjectResult: subjectResult,
    });
    console.log("\n")
    return {
      timeoutResult: timeoutResult,
      errorResult: errorResult,
      actionResult: actionResult,
      statusResult: statusResult,
      subjectResult: subjectResult,
    };
  }

  stringAnalyser(string, key) {
    if (string.match(key) != null) {
      return string.match(key)[0];
    }
  }

  // buildStepCountInput() {
  //     const stepCountCurrentRunArray = this.skymath.stringNumbersToArray(run1.stepCount,'-');
  //     const stepCountExistingRunArray = this.skymath.stringNumbersToArray(run2.stepCount,'-');
  //     if (stepCountCurrentRunArray === stepCountExistingRunArray) {
  //         this.#stepCountInput = 0
  //     } else {
  //         if (stepCountCurrentRunArray.length < stepCountExistingRunArray.length) {
  //             for (let i = 0; i < (stepCountExistingRunArray.length - stepCountCurrentRunArray.length); i++ ) {
  //                 stepCountCurrentRunArray.push(undefinedValue);
  //             }
  //         } else {
  //             for (let i = 0; i < (stepCountCurrentRunArray.length - stepCountExistingRunArray.length); i++ ) {
  //                 stepCountExistingRunArray.push(undefinedValue);
  //             }
  //         }
  //         for (let j = 0; j < stepCountCurrentRunArray.length; j++) {
  //             if (stepCountCurrentRunArray[j] != stepCountExistingRunArray[j]) {
  //                 this.#stepCountInput = stepCountCurrentRunArray.length - j;
  //                 break;
  //             }
  //         }
  //     }
  // }
}

module.exports = new HAL9000();
